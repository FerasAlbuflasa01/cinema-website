<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <style>
      #seats {
        display: flex;
        flex-direction: column; /* Ensure rows stack vertically */
      }
      .rows {
        background-color: blue;
        display: flex; /* Ensure seats are in a row */
      }
      .seat-row {
        width: 30px; /* Adjust seat width */
        height: 30px; /* Adjust seat height */
        margin: 5px; /* Space between seats */
        background-color: white; /* Default seat color */
        border: 1px solid black; /* Seat border */
        cursor: pointer; /* Change cursor to pointer */
      }
      .selected {
        background-color: green; /* Color for selected seats */
      }
      .unavailable {
        background-color: red; /* Color for unavailable seats */
        cursor: not-allowed; /* Change cursor for unavailable seats */
      }
    </style>
  </head>
  <body>
    <div id="messame">
      <h2>Choose your seat</h2>
      <h2><%= movie.movie.name %></h2>
      <h2>
        <%= booking.date %> and <%= booking.time %> | <%= booking.theater %>
      </h2>
    </div>
    <form id="seatForm" action="/movies/<%= booking._id %>" method="post">
      <div id="seats"></div>
      <button type="button" id="submitButton">Submit Selection</button>
      <input type="hidden" id="selectedSeats" name="selectedSeats" />
    </form>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const seatsHtml = document.querySelector('#seats')
        const selectedSeats = new Set() // Use Set for unique seat IDs

        // Create seat layout
        for (let index = 0; index < 6; index++) {
          let rowElement = document.createElement('div')
          rowElement.setAttribute('id', `row-${index + 1}`)
          rowElement.setAttribute('class', 'rows')
          for (let j = 0; j < 6; j++) {
            let seatElement = document.createElement('div')
            seatElement.setAttribute('id', `seat-${index + 1}-${j + 1}`)
            seatElement.setAttribute('class', 'seat-row')

            // Optionally mark some seats as unavailable
            if (Math.random() < 0.3) {
              seatElement.classList.add('unavailable')
              seatElement.style.cursor = 'not-allowed' // Change cursor
            } else {
              // Add event listener for seat selection
              seatElement.addEventListener('click', function () {
                if (!seatElement.classList.contains('unavailable')) {
                  seatElement.classList.toggle('selected') // Toggle 'selected' class
                  const seatId = seatElement.id
                  if (selectedSeats.has(seatId)) {
                    selectedSeats.delete(seatId) // Remove from selection
                  } else {
                    selectedSeats.add(seatId) // Add to selection
                  }
                  console.log('Selected Seats:', Array.from(selectedSeats))
                }
              })
            }

            rowElement.appendChild(seatElement)
          }
          seatsHtml.appendChild(rowElement)
        }

        // Submit button event
        document
          .getElementById('submitButton')
          .addEventListener('click', function () {
            if (selectedSeats.size > 0) {
              // Convert Set to Array and join into a string
              const selectedSeatsArray = Array.from(selectedSeats).join(',')
              // Set the value of the hidden input
              document.getElementById('selectedSeats').value =
                selectedSeatsArray
              // Submit the form
              document.getElementById('seatForm').submit() // Ensure this targets the form
            } else {
              alert('Please select at least one seat.')
            }
          })
      })
    </script>
  </body>
</html>
